//
// Copyright (C) 2016 Jonathon Love
//

syntax = "proto3";

package jamovi.coms;

// ANALYSIS

enum Status {
    COMPLETE = 0;
    IN_PROGRESS = 1;
    ERROR = 2;
}

message Error {
    string message = 1;
    string cause = 2;
}

message ComsMessage {
    int32 id = 1;
    string instanceId = 2;
    bytes payload = 3;
    string payloadType = 4;
    Status status = 5;
    Error error = 6;
    int32 progress = 7;
    int32 progressTotal = 8;
}

message AnalysisRequest {
    string sessionId = 7;
    string instanceId = 1;
    int32 datasetId = 22;
    int32 analysisId = 2;
    string name = 3;
    string ns = 4;

    enum Perform {
        INIT = 0;
        RUN = 1;
        RENDER = 4;
        SAVE = 5;
        DELETE = 6;
        DUPLICATE = 7;
    }

    Perform perform = 5;
    AnalysisOptions options = 6;
    repeated string changed = 8;
    int32 revision = 9;
    bool restartEngines = 10;
    bool clearState = 11;

    repeated AnalysisRequest addons = 12;

    int32 index = 15;
    string path = 16;
    string part = 17;
    string format = 18;
    string i18n = 19;
    bool arbitraryCode = 20;
    bool enabled = 21;
}

enum AnalysisStatus {
    ANALYSIS_NONE = 0;
    ANALYSIS_INITED = 1;
    ANALYSIS_RUNNING = 2;
    ANALYSIS_COMPLETE = 3;
    ANALYSIS_ERROR = 4;
    ANALYSIS_RENDERING = 5;
}

message AnalysisResponse {

    string instanceId = 1;
    int32 analysisId = 2;
    string name = 3;
    string ns = 4;
    // Version version = 5;
    AnalysisOptions options = 6;
    ResultsElement results = 7;
    AnalysisStatus status = 8;
    Error error = 9;
    bool final = 10;
    int32 revision = 11;
    bool restartEngines = 12;
    string stacktrace = 13;
    uint32 version = 14;
    int32 index = 15;
    repeated Reference references = 16;
    int32 dependsOn = 17;
    string title = 18;
    bool hasTitle = 19;
    bool arbitraryCode = 20;
    bool enabled = 21;
}

message Reference {
    string name = 1;
    string type = 2;
    Authors authors = 3;
    uint32 year = 4;
    string title = 5;
    string publisher = 6;
    string url = 7;
    string volume = 8;
    string issue = 10;
    string pages = 9;
    string year2 = 11;
}

message Authors {
    string complete = 8;
}

message AnalysisOption {

    enum Other {
        FALSE = 0;
        TRUE  = 1;
        NONE  = 2;
    }

    oneof type {
        int32 i = 1;
        double d = 2;
        string s = 3;
        Other o = 4;
        AnalysisOptions c = 5;
    }
}

message AnalysisOptions {
    repeated AnalysisOption options = 1;
    bool hasNames = 2;
    repeated string names = 3;
}

enum Visible {
    DEFAULT_YES = 0;
    DEFAULT_NO = 1;
    YES = 2;
    NO = 3;
}

message ResultsCell {

    enum Other {
        MISSING = 0;
        NOT_A_NUMBER = 1;
    }

    oneof cellType {
        int32  i = 1;
        double d = 2;
        string s = 3;
        Other  o = 4;
    }

    int32 format = 5; // bit field

    // 1 = begin group
    // 2 = end group
    // 4 = negative (red highlight)

    repeated string footnotes = 6;
    repeated string symbols = 7;
    int32 sortKey = 8;
}

message ResultsColumn {

    string name = 1;
    string title = 2;
    string type = 3;
    string format = 4;
    string superTitle = 5;
    bool   combineBelow = 6;

    repeated ResultsCell cells = 7;

    bool sortable = 13;
    bool hasSortKeys = 14;
    Visible visible = 15;
}

message ResultsTableNote {
    string key  = 1;
    string note = 2;
    bool   init = 3;
}

message Sort {
    string sortBy = 1;
    bool   sortDesc = 2;
}

message ResultsTable {
    repeated ResultsColumn columns = 1;
    repeated string rowNames = 2;
    bool swapRowsColumns = 3;
    repeated ResultsTableNote notes = 4;
    string asText = 5;
    string rowSelect = 6;
    int32 rowSelected = 7;
    string sortSelect = 8;
    Sort sortSelected = 9;
}

message ResultsImage {
    string path = 1;
    int32 width = 2;
    int32 height = 3;
}

message ResultsArray {
    repeated ResultsElement elements = 1;

    enum LayoutType {
        FLAT = 0;
        LIST_SELECT = 1;
    }

    LayoutType layout = 2;
    bool hideHeadingOnlyChild = 4;

    bool hasHeader = 8;
    ResultsElement header = 9;
}

message ResultsGroup {
    repeated ResultsElement elements = 1;
}

message ResultsHtml {
    string content = 1;
    repeated string scripts = 2;
    repeated string stylesheets = 3;
}

message ResultsNotice {

    enum NoticeType {
        ERROR = 0;
        STRONG_WARNING = 1;
        WARNING = 2;
        INFO = 3;
    }

    string content = 1;
    NoticeType type = 2;
}

message ResultsOutput {
    string name = 1;
    string title = 2;
    string description = 3;
    DataSetSchema.MeasureType measureType = 4;
    bool stale = 5;
    bool incData = 6;
    repeated VariableLevel levels = 7;
    repeated int32 i = 8;
    repeated double d = 9;
}

message ResultsOutputs {
    repeated ResultsOutput outputs = 1;
    repeated uint32 rowNums = 2;
}

message ResultsElement {
    string name = 1;
    string title = 2;
    AnalysisStatus status = 3;
    Error error = 4;
    bool stale = 5;

    oneof type {
        ResultsTable table = 6;
        ResultsImage image = 7;
        ResultsGroup group = 8;
        ResultsArray array = 9;
        string preformatted = 10;
        string syntax = 11;
        ResultsHtml html = 12;
        ResultsOutputs outputs = 13;
        ResultsNotice notice = 24;
    }

    bytes state = 14;
    Visible visible = 15;
    repeated string refs = 16;
}


// CLIENT

message InstanceRequest {
}

message InstanceResponse {
    string instanceId = 1;
}

message OpenRequest {
    string filePath = 1;
    repeated string filePaths = 2;

    enum Op {
        OPEN = 0;
        IMPORT_REPLACE = 1;
    }

    Op op = 3;
}

message OpenProgress {
    string path = 3;
}

message SaveRequest {
    string filePath = 1;
    bool overwrite = 2;
    bool export = 3;
    string part = 4;
    string format = 5;
    bool incContent = 6;
    bytes content = 7;
}

message SaveProgress {
    bool fileExists = 1;
    bool success = 2;
    string path = 3;
    string title = 4;
    string saveFormat = 5;
}

message FSEntry {
    string path = 1;

    enum Type {
        FILE = 0;
        FOLDER = 1;
        DRIVE = 2;
        SPECIAL_FOLDER = 3;
    }

    Type type = 2;
    string name = 3;
    string description = 4;
    bool isExample = 8;
    repeated string tags = 9;
    string license = 10;
    string licenseUrl = 11;
}

message FSRequest {
    string path = 1;
    repeated string extensions = 2;
}

message FSResponse {
    string path = 1;
    string osPath = 2;
    repeated FSEntry contents = 3;
    string errorMessage = 4;
}

message DataSetEntry {
    string name = 1;
    string path = 2;
    string location = 3;
    string description = 4;
}

message AnalysisMeta {
    string name = 1;
    string ns = 2;
    string title = 3;

    string menuGroup = 4;
    string menuSubgroup = 5;
    string menuTitle = 6;
    string menuSubtitle = 7;
}

message ModuleMeta {
    string name = 1;
    string title = 2;
    uint32 version = 3;
    string description = 4;
    repeated string authors = 5;
    repeated AnalysisMeta analyses = 6;
    string path = 10;
    bool isSystem = 11;
    bool new = 12;
    uint32 minAppVersion = 13;
    bool visible = 14;
    bool incompatible = 15;
}

enum ValueType {
    INT = 0;
    DOUBLE = 1;
    STRING = 2;
    BOOL = 3;
}

message SettingValue {
    string name = 1;
    ValueType valueType = 2;
    oneof value {
        int32 i = 3;
        double d = 4;
        string s = 5;
        bool b = 6;
    }
}

message SettingsRequest {
    repeated SettingValue settings = 4;
}

message Notification {
    uint32 id = 1;
    uint32 status = 2; // 0 = transient, 1 = dismiss, 2 = indefinite
    string title = 3;
    string message = 4;
    // 1 = session shutdown
    repeated SettingValue values = 5;
}

message SettingsResponse {
    repeated DataSetEntry recents = 1;
    /*repeated DataSetEntry examples = 2;*/
    repeated ModuleMeta modules = 3;
    repeated SettingValue settings = 4;
    repeated SettingValue config = 5;
}

message StoreRequest {
}

message StoreResponse {
    repeated ModuleMeta modules = 1;
    string message = 2;
}

message VariableLevel {
    string label = 1;
    int32 value = 2;
    string importValue = 3;
    bool pinned = 4;
}

message ColumnCellRange {
    int32 start = 1;
    int32 end = 2;
}

message RowRange {
    int32 index = 1;
    int32 count = 2;
}

enum ColumnType {
    NONE = 0;
    DATA = 1;
    COMPUTED = 2;
    RECODED = 3;
    FILTER = 4;
    OUTPUT = 5;
}

message AnnotationSchema {

    enum Action {
        CREATE = 0;
        UPDATE = 1;
        REMOVE = 2;
    }

    int32 id = 1;
    Action action = 2;
    string data = 3;
}

message DataSetSchema {

    enum MeasureType {
        NONE = 0;
        NOMINAL = 2;
        ORDINAL = 3;
        CONTINUOUS = 4;
    }

    message ColumnSchema {

        enum Action {
            MODIFY = 0;
            REMOVE = 1;
            INSERT = 2;
        }

        int32 id = 1;
        string name = 2;
        int32 index = 3;
        Action action = 23;

        enum DataType {
            NO_DATA_TYPE = 0;
            INTEGER = 1;
            DECIMAL = 2;
            TEXT = 3;
        }

        ColumnType columnType = 4;
        DataType dataType = 5;
        MeasureType measureType = 6;
        bool autoMeasure = 7;
        int32 width = 8;
        bool hasLevels = 9;
        repeated VariableLevel levels = 10;
        int32 dps = 11;
        string importName = 12;
        string formula = 13;
        string formulaMessage = 14;
        string description = 15;
        bool hidden = 16;
        bool active = 17;
        int32 filterNo = 18;
        bool trimLevels = 19;
        int32 transform = 20;
        int32 parentId = 21;
        repeated ColumnCellRange editedCellRanges = 22;
        bool dataChanged = 24;
        repeated string missingValues = 25;
        int32 outputAnalysisId = 26;
    }

    message TransformSchema {

        enum Action {
            CREATE = 0;
            UPDATE = 1;
            REMOVE = 2;
        }

        int32 id = 1;
        string name = 2;
        string description = 3;
        repeated string formula = 4;
        repeated string formulaMessage = 5;
        Action action = 6;
        int32 colourIndex = 7;
        MeasureType measureType = 8;
        string suffix = 9;
    }

    repeated ColumnSchema columns = 1;

    uint32 rowCount = 5;
    uint32 columnCount = 6;
    uint32 vRowCount = 7;
    uint32 vColumnCount = 8;
    uint32 tColumnCount = 9;
    uint32 deletedRowCount = 12;
    uint32 addedRowCount = 13;
    uint32 editedCellCount = 14;
    uint32 rowCountExFiltered = 15;
    bool filtersVisible = 16;

    repeated TransformSchema transforms = 10;
    repeated RowRange removedRowRanges = 11;
}

enum GetSet {
    GET = 0;
    SET = 1;
    UNDO = 2;
    REDO = 3;
}

message InfoRequest {
}

message InfoResponse {
    bool hasDataSet = 1;
    string title = 2;
    string path = 3;
    string saveFormat = 4;
    bool edited = 5;
    bool blank = 6;
    DataSetSchema schema = 7;

    repeated AnalysisResponse analyses = 9;
    uint32 changesCount = 10;
    int32 changesPosition = 11;
}

enum SpecialValues {
    MISSING = 0;
    NOT_A_NUMBER = 1;
}

message DataSetRR {

    message DataBlock {
        message CellValue {
            oneof type {
                int32 i = 1;
                double d = 2;
                string s = 3;
                SpecialValues o = 4;
            }
            bool missing = 7;
        }

        uint32 rowStart = 1;
        uint32 rowCount = 2;
        uint32 columnStart = 3;
        uint32 columnCount = 4;
        repeated CellValue values = 5;

        bool incCBData = 6;
        string cbText = 7;
        string cbHtml = 8;

        bool clear = 9;
    }

    message RowData {

        enum RowDataAction {
            REMOVE = 0;
            INSERT = 1;
            MODIFY = 2;
        }

        uint32 rowStart = 1;
        uint32 rowCount = 2;
        bytes filterData = 3;
        RowDataAction action = 4;
        repeated int32 rowNums = 5 [packed=true];
    }

    GetSet op = 1;
    bool incData = 2;
    bool incSchema = 3;
    repeated DataBlock data = 4;
    repeated RowData rows = 5;
    DataSetSchema schema = 6;
    uint32 changesCount = 7;
    int32 changesPosition = 8;
    bool noUndo = 9;
    bool filtersChanged = 10;
}

message ModuleRR {

    enum ModuleCommand {
        INSTALL = 0;
        UNINSTALL = 1;
        HIDE = 2;
        SHOW = 3;
    }

    ModuleCommand command = 1;
    string name = 2;
    string path = 3;
}

message LogRR {
    string content = 1;
}
